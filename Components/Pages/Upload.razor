@page "/upload"
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@rendermode InteractiveServer

<h3>Upload Research Paper</h3>

<InputFile OnChange="OnInputFileChange" />
<button @onclick="UploadFile">Upload</button>

<p>@message</p>

<h3>Your Uploaded PDFs</h3>
@if (isLoading)
{
    <p>Loading...</p>
}
else if (uploadedPdfs.Count == 0)
{
    <p>No PDFs uploaded yet.</p>
}
else
{
<ul class="list-group">
    @foreach (var pdf in uploadedPdfs)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center">
            <span>@pdf</span>
            <div>
                <button class="btn btn-primary me-2" @onclick="() => NavigateToSummary(pdf)">üìÑ Summarize and Chat</button>
                <button class="btn btn-warning me-2 text-white" @onclick="() => NavigateToPodcast(pdf)">üéôÔ∏è Podcast</button>
                <button class="btn btn-danger" @onclick="() => Remove(pdf)">üóëÔ∏è Remove</button>
            </div>
        </li>
    }
</ul>
}

@code {
    private IBrowserFile file;
    private string message = string.Empty;
    private List<string> uploadedPdfs = new();
    private bool isLoading = true;
    private string username;
    private string password;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task GetUserCredentials()
    {
        username = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userEmail");
        password = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userPassword");
    }

    private async Task UploadFile()
    {
        if (file == null)
        {
            message = "Please select a file.";
            StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            message = "You must sign in first.";
            StateHasChanged();
            return;
        }

        var content = new MultipartFormDataContent
        {
            { new StreamContent(file.OpenReadStream()), "file", file.Name },
            { new StringContent(username), "username" },
            { new StringContent(password), "password" }
        };

        try
        {
            var httpClient = HttpClientFactory.CreateClient("Backend");
            var response = await httpClient.PostAsync("/user/add_pdf", content);

            if (response.IsSuccessStatusCode)
            {
                message = "File uploaded successfully!";
                await LoadUploadedPdfs();
            }
            else
            {
                var errorDetails = await response.Content.ReadAsStringAsync();
                message = $"Failed to upload file. Server response: {errorDetails}";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
    }

    private async Task LoadUploadedPdfs()
    {
        isLoading = true;
        StateHasChanged();

        var httpClient = HttpClientFactory.CreateClient("Backend");
        var response = await httpClient.PostAsync("/user/pdfs",
            new FormUrlEncodedContent(new Dictionary<string, string>
            {
                { "username", username },
                { "password", password }
            }));

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<PdfResponse>();
            uploadedPdfs = result?.pdfs ?? new();
        }
        else
        {
            message = "Failed to load PDFs.";
        }

        isLoading = false;
        StateHasChanged();
    }

    private void NavigateToPodcast(string pdf)
    {
        NavigationManager.NavigateTo($"/podcast/{pdf}");
    }

    private void NavigateToSummary(string pdf)
    {
        NavigationManager.NavigateTo($"/summary/{pdf}");
    }

    private async Task Remove(string pdf)
    {

        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            message = "You must sign in first.";
            StateHasChanged();
            return;
        }

        var httpClient = HttpClientFactory.CreateClient("Backend");
        var response = await httpClient.PostAsync("/user/remove_pdf",
            new FormUrlEncodedContent(new Dictionary<string, string>
            {
                { "username", username },
                { "password", password },
                { "pdf_name", pdf }
            }));
        
        LoadUploadedPdfs();
    }


    private class PdfResponse
    {
        public List<string> pdfs { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetUserCredentials();
            await LoadUploadedPdfs();
            StateHasChanged();
        }
    }
}